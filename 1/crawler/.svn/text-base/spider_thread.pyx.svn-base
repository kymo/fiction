#encoding:utf-8
#author: kades
#base thread definition for the spider engine


import threading
import urllib2
import re
from BeautifulSoup import BeautifulSoup
from fiction.models import *
from search.models import *
from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.QtWebKit import *
import sys

from pymmseg import mmseg

mmseg.dict_load_defaults()

#to render the html page to get the content 
#which must be generated by javascript
class Render(QWebPage):
    def __init__(self, url):
        self.app = QApplication(sys.argv)
        QWebPage.__init__(self)
        self.loadFinished.connect(self._loadFinished)
        self.mainFrame().load(QUrl(url))
        self.app.exec_()
    def _loadFinished(self, result):
        self.frame = self.mainFrame()
        self.app.quit()

#   spider thread
#   here we defined the newest html page three levels
#   first: the main content  of the newest area
#   second: the chapter area
#   third: the url area
#   after we render the html page with QtWebPage, we can get all the content
#   after saving the information into database, we need to segment the content and save them
#   into the index database

class SpiderThread(threading.Thread):
    def __init__(self,
            thread_name = "",
            newest_url = "",
            newest_host = "",
        
            title_pattern = "",
            author_pattern = "",
            chapter_pattern = "",
            types_pattern = "",
            #the newest fiction div area
            content_tag = "",content_dict = {},
            #each chapter area
            chapter_tag = "", chapter_dict = {},
            #chapter url
            url_tag = "", url_dict = {},
            avatar_url = "",  
            recommond_pattern = None,
            recommond_url = "",
            like_pattern = None, like_url = ""
            ):
        threading.Thread.__init__(self)
        self.thread_name = thread_name
        self.newest_url = newest_url
        self.host = newest_host
        
        self.title_pattern = title_pattern
        self.author_pattern = author_pattern
        self.types_pattern = types_pattern
        self.chapter_pattern = chapter_pattern
        
        self.content_tag = content_tag
        self.content_dict = content_dict
        
        self.chapter_tag = chapter_tag
        self.chapter_dict = chapter_dict

        self.url_tag = url_tag
        self.url_dict = url_dict

        self.avatar_url = avatar_url
        self.recommond_pattern = recommond_pattern
        self.recommond_url = recommond_url
        self.like_pattern = like_pattern
        self.like_url = like_url
        print 'end'

    def rebuild_link(self, link):
        if link[0] == '/':
            return self.host + link
        
    def run(self):
        """thread method"""
        #get all the fresh information
        req = Render(self.newest_url)
        html_page = req.frame.toHtml()
        html_page = unicode(html_page.toUtf8(), 'utf-8', 'ignore')
        html_page = BeautifulSoup(html_page)
        #get the newest area
        content = html_page.findAll(self.content_tag, self.content_dict)
        contents = ''.join([str(item) for item in content])
        #get all the chapter information
        chapter_infor = BeautifulSoup(contents)
        content = chapter_infor.findAll(self.chapter_tag, self.chapter_dict)
        for item in content:
            contents = str(item)
            types = ''.join(re.findall(self.types_pattern, contents))
            title = ''.join(re.findall(self.title_pattern, contents))
            chapter = ''.join(re.findall(self.chapter_pattern, contents))
            author = ''.join(re.findall(self.author_pattern, contents))
            #get the urls
            chap_html = BeautifulSoup(contents)
            url = chap_html.findAll(self.url_tag, self.url_dict)
            url = ''.join([str(it) for it in url])
            url =BeautifulSoup(url).a['href']
            if url[0] == '\\':
                url = self.host + url
            try:
                fic = Fiction.objects.get(fiction_title = title)
            except:
                fic = None
            
            try:
                web_site = FictionWebSite.objects.get(url = self.host)
            except:
                web_site = None
            
            if not web_site:
                web_site = FictionWebSite(title = '', url = self.host)
                web_site.save()
            
            if not fic:
                #add database new fiction,so we need to get the avatar picture
                #
                fic = Fiction.objects.create(fiction_title = title, 
                    fiction_avatar_url = '',
                    fiction_intro = '')
                member = MemberShip(fiction = fic, website = web_site)
                member.save()
                #segment the title
                for item in mmseg.Algorithm(title):
                    print item.text, item.start, item.end
                    Index.objects.create(key = item.text,
                        fiction = fic,
                        position = ','.join([str(item.start), str(item.end)]),
                        bit = '2',#title
                        )
                print '....................................'
            #save chapter
            try:
                chap = Chapter.objects.get(chapter_title = chapter, source__id__exact = web_site.id)
            except:
                chap = None
            if not chap:
                chp = Chapter(chapter_title = chapter,
                    charpter_url = url,
                    fiction = fic,
                    source = web_site)
                chp.save()
        #get the avatar and the recommond_times

def qidian_test():
    """
    new_one = <div class="gxlbbg5"><div class="gxlbbg5a"><a href="http://gdyq.qdmm.com" target="_blank" class="hui2">[古代言情]</a></div><div class="gxlbbg5b"><a href="/Book/2572434.aspx" target="_blank">冠盖路</a> <span class="gxlbbg5bfont"><a rel="nofollow" href="http://vipreader.qidian.com/BookReader/vip,2572434,46281060.aspx" target="_blank" class="hui2">第一百八十五章 补偿</a></span> <span class="gxlbbg5bfont2">[VIP]</span></div><div class="gxlbbg5c"><a href="http://me.qidian.com/authorIndex.aspx?id=2600912" target="_blank" class="black">醉夜吟</a></div><div class="gxlbbg5d">06-27 14:21</div></div>
    strs = <div class="gxlbbg5"><div class="gxlbbg5a"><a href="http://xianxia.qidian.com" target="_blank" class="hui2">[仙侠]</a></div><div class="gxlbbg5b"><a href="/Book/2807393.aspx" target="_blank">仙炼乾坤</a> <span class="gxlbbg5bfont"><a href="http://read.qidian.com/BookReader/2807393,46280719.aspx" target="_blank" class="hui2">第一卷 修仙之始　第四十章 莫夫人</a></span> </div><div class="gxlbbg5c"><a href="http://me.qidian.com/authorIndex.aspx?id=3375302" target="_blank" class="black">龙猫骑士</a></div><div class="gxlbbg5d">06-27 13:56</div></div>
    tt = r"<div class=\"gxlbbg[5-6]a\"><a.*target=\"_blank\" class=\"hui2\">(?P<tips>.*)</a></div><div class=\"gxlbbg[5-6]b\""
    t2 = r"<a href=\"/Book/\w+.aspx\" target=\"_blank\">(?P<tips>.*)</a>.*<span class=\"gxlbbg[5-6]bfont\""
    t3 = r"<a href=\"http://me.qidian.com/authorIndex\.aspx\?.*\".*target=\"_blank\".*>(?P<tips>.*)</a>"
    t4 = r"<span class=\"gxlbbg[5-6]bfont\"><a.*href=\"http://.*read.*\.qidian\.com/BookReader/.*aspx\" target=\"_blank\" class=\"hui2\">(?P<tips>.*)</a></span>"
    ans = re.findall(t2, new_one)
    print ans
    ans2 = re.findall(t4, strs)
    ans3 = re.findall(t3,strs)
    for item in ans:
        print item

    for item in ans2:
        print item
    for item in ans3:
        print item
    
    """
    st = SpiderThread('qidian',
        "http://www.qidian.com",
        "http://www.qidian.com",
        #four
        r"<a href=\"/Book/\w+.aspx\" target=\"_blank\">(?P<tips>.*)</a>.*<span class=\"gxlbbg[5-6]bfont\"",
        r"<a href=\"http://me.qidian.com/authorIndex\.aspx\?.*\".*target=\"_blank\".*>(?P<tips>.*)</a>",
        r"<span class=\"gxlbbg[5-6]bfont\"><a.*href=\"http://.*read.*\.qidian\.com/BookReader/.*aspx\" target=\"_blank\" class=\"hui2\">(?P<tips>.*)</a></span>",
        r"<div class=\"gxlbbg[5-6]a\"><a.*target=\"_blank\" class=\"hui2\">(?P<tips>.*)</a></div><div class=\"gxlbbg[5-6]b\"",
        #content
        "div",
        {'class' : 'gxlbbg', 'id' : 'divUpdate1'},
        #chapter
        "div",
        {'class' : re.compile(r"gxlbbg[5-6]$")},
        #url
        "span",
        {"class" : re.compile(r"gxlbbg[5-6]bfont")},
        )
    st.start()
    print 'qidian thread start'

def xs8_test():
    st = SpiderThread('xiaoshoba', 
            "http://www.xs8.cn/",
            "http://www.xs8.cn",
            #four kinds of tag
            r"<span class=\"f14\">(?P<tips>.*)</span>",
            r"<a.*href=\"/author/\w+.html\".*title=\"(?P<tips>.*)\">",
            r"<a.*href=\"/book/\w+/readbook.html\".*title=\"(?P<tips>.*)\">",
            r"<a href=\"/channel-\w*.html\" target=\"_blank\">(?P<tips>\W*)</a>",
            #content
            "div",
            {'class' : "h480 tab_cont show"},
            #chapter
            "dl",
            {},
            #chapter url
            "dd",
            {'class' : "chapter"},
            )
    st.start()
    print 'eyus'
